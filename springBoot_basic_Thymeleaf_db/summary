//////////////////////////////////
2강 - thymeleaf를 뷰로 사용하는 방법
//////////////////////////////////


스프링 프레임워크는 기능이 많은만큼 환경설정이 복잡한 편이다.
이에 어려움을 느낀 개발자들을 위해 나온것이 스프링부트이다.
스프링 부트는 스프링 프레임워크를 사용하기 위한 설정의 많은 부분을 자동화하여
개발자가 정말 편하게 스프링을 활용할수 있도록 돕는다,
스프링 부트 starter 디펜던시만 추가해주면 바로 API를 정의하고, 내장된 톰캣으로
웹 어플리케이션 서버를 실행할 수 있다.
실행환경이나 의존성 관리 등의 인프라 관련 등은 신경쓸 필요 없이 바로 코딩을 시작하면 된다.
스프링 프레임워크와 스프링부트는 back-end단(컨트롤러, 서비스, DAO)은 동일하나, front-end단은 JSP대신 Thyme leaf를 사용한다.


2) Spring boot 프로젝트 실행방법

- 시작클래스 : 프로젝트 이름 + Application.java
- tomcat이 내장되어 있으므로 실행시 스프링프레임웍에서 사용했던 톰캣을 중지시키고 실행. => 주의사항
- 시작클래스 우클릭 > Run as > Spring Boot App

3) 템플릿 엔진
spring boot에서 사용가능한 template에는 여러 종류가 있는데 그 중에서 타임리프(Thyme leaf)를 활용하여 실습
Thyme - 백리향
spring + Thymeleaf

- 웹 템플릿 엔진
스프링 MVC와의 통합 모듈을 제공하여, 애플리케이션에서 JSP로 만든 기능들을 완전히 대체할 수 있음.
타임리프의 목표는 세련되고 잘 다듬어진 템플릿을 제공하는것

4) thymeleaf를 뷰로 사용하는 방법


소스 작성
1) TestController.java

@Controller
public class MemberController {

	@RequestMapping("/list.do")
	public ModelAndView hello(ModelAndView mav) {
		mav.setViewName("list"); // 뷰의 이름 : src/main/resources/templates/test.html
		
		
		mav.addObject("message", "스프링부트 애플리케이션 - test"); // test.html에서 {message} el태그로 받는다.
		return mav;
	}
}

2) result.html(src/main/resources/templates/test.html)

4) src/main/resources/application.properties 작성

# db connection(oracle) - 커넥션풀 정보(context.xml)
spring.data

6) view단 작성
- src/main/resources => 뷰의 기본 디렉토리
- static => 정적인 요소들(javascript, css, images)
- templates => 동적인 요소들(jsp 사용불가) .. 자바에서 벗어나 php, .net 개발도 사용하도록 .html 사용

6-1) [ templates/test.html ]  => 확장자만 html일 뿐 변환과정을 거쳐 클라이언트에게 보여줄 html로 만든다.
- templates 폴더 > new > other > test.html

7) 실행
Project - clean

SpringBootBasicApplication.java( :메인이 있는 클래스) 우클릭 > Run as Spring Boot App

url은 직접 입력해야함.
http://localhost:8095/memberlist.do

port 중복시

	application.properties에서
	server.port=중복안된 포트로 변경