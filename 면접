1	자료형
		 * 메서드명,변수명은 소문자로 시작한다.(cf. 클래스명은 대문자로 시작한다.)
		 * 변수 : 데이터를 담는 그릇이며,	데이터의 저장과 참조를 위해 메모리 공간을 할당받는다.
		 * 			반드시 먼저 선언: 컴파일러는 변수으ㅢ 자료형에 맞는 기억 공간을 미리 확보
		 * 			선언 : 자료형 변수명; 예) int a;
		 * 			선언과 동시에 할당 : 자료형 변수명 = 초기화; 예) int age = 30;
		 * 
		 * [면접문제]
		 * 1.	기본 자료형 (Primitive Type) : 실제값이 저장
		 * 		정수형 : byte short int long
		 * 		실수형 : float double
		 * 		논리형	: boolean - 1byte
		 * 		문자형 : char - 2byte
		 * 		
		 * 
		 * 2.	참조형(Reference Type) : 실제 객체를 가리키는 주소값 저장 
		 * 		클래스, 인터페이스 , 배열
		 * 
		 * 3. 문자열 : String 클래스
		 */
=======================================
2번.	상수
	/*
		 * 상수:	프로그램이 실행되는 동안, 값이 변하지 않는 수 또는 변경 불가능한 수
		 * 			final 키워드는 변수에 값이 대입되고 나면 변수값이 더이상 변경불가
		 * 			주로 대문자를 사용
		 * 			만일 값변경시 상수를 선언한 부분의 값만 변경한다.
		 */
		 final double PI = 3.14; // 상수선언 및 초기화 ..면접	
=======================================

3번 구구단 예제
	for	 / while

4번. 객체설명
			/*
	 *  인스턴스 생성 : 클래스명 참조변수명 = new 클래스명();	// new 생성자;
	 *  		  접근: 참조변수명.멤버변수
	 *  				 참조변수명.멤버메서드;
	 *  - 참조변수명에는 생성한 인스턴스의 힙메모리공간 주소값이 들어있다.
	 *  	앞의 클래스명은 데이터타입이고, 참조변수로 접근할 때 사용한다.
	 *  	뒤의 클래스명은 힙메모리에 인스턴스 생성시 사용되는 생성자이다.
	 */

		 * 클래스 : 객체에 대한 설계도, 디자인
		 * 			-멤버변수(속성,필드) + 멤버메서드(기능,동작) + 생성자
		 * 
		 * 클래스는 설계도(디자인)이며, 인스턴스는 이 설계도를 바탕으로 만들어진 힙메모리 공간이다.
		 *			  그 결과 주소값이 만들어지며, 참조변수에 할당된다.
		 *			  객체는 인스턴스라고도 한다.
		 */
		 
5번. setter / getter

6번. 생성자 오버로드 vs 상속 오버라이딩
			  오버로드 : 메서드나 생성자의 매개변수 갯수가 다르거나, 매개변수 타입이 다른 경우를 말한다(단 리턴타입은 무관하다.)	
			  
			  
			  
			  
			  
			  
	 *[ArrayList]
		 *	2.	선언
		 *	ArrayList<데이터타입클래스>	참조변수 = new ArrayList<데이터타입클래스>();
		 *
		 *	다형성 적용
		 *	List<데이터타입클래스>	참조변수 = new ArrayList<데이터타입클래스>();
		 *	
		 *	3. 특징 : 데이터 순서가 있고, 중복허용된다.
		 *	4. 추가 :  list.add(값);		//	앞에서부터 순서대로 추가
		 *				list.add(추가할 위치 index, 값);	// 지정한 인덱스에 값을 추가, 그 뒤 값은 밀려난다.
		 *	5. 값 가져오기 : list.get(가져올 index); 	// list.size() 만큼 반복
		 *	6. 교체 : list.set(교체할 위치 index, 값);	// 지정한 인덱스의 값을 변경.. 그 뒤값은 그대로이다.
		 *	7. 삭제 : list.remove(삭제할 위치 index);
		 *	8. 검색 : list.indexOf(검색할 값);		 // 중요
		 *		  리스트에서 검색할 값과 똑같은 값을 갖는 첫번째 데이터를 찾아서 그 위치의 인덱스를 리턴한다.
		 *		  검색할 값과 일치한 데이터가 없으면 -1을 리턴한다.
		 *	9. 전체삭제 : list.clear();
		 *	10. 반복자 : Iterator<E> iterator : while(hasNext()) { next() } 
